@model UmschulungConfig
@{
    ViewData["Title"] = "Wochennachweis-Generator";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <h1 class="my-4 text-center">
                <i class="bi bi-file-earmark-word text-primary me-2"></i>
                Wochennachweis-Generator
            </h1>
            <p class="text-center text-muted mb-4">
                Automatische Erstellung von Wochennachweisen für Umschulung und Praktikum
                <br><small><i class="bi bi-cpu me-1"></i>Client-seitige Generierung - Keine Server-Last</small>
            </p>

            @if (TempData["StatusMessage"] != null)
            {
                <div class="alert alert-@(TempData["StatusMessageType"] ?? "success") alert-dismissible fade show" role="alert">
                    <i class="bi bi-@(TempData["StatusMessageType"]?.ToString() == "danger" ? "exclamation-triangle" : "check-circle") me-2"></i>@TempData["StatusMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-person-circle me-2"></i>Grunddaten
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-action="Generate" method="post" id="wochennachweis-form">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Umschulungsbeginn" class="form-label">
                                        <i class="bi bi-calendar-event me-1"></i>Beginn der Umschulung/des Praktikums
                                    </label>
                                    <input asp-for="Umschulungsbeginn" class="form-control" type="date" required id="Umschulungsbeginn" />
                                    <span asp-validation-for="Umschulungsbeginn" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Klasse" class="form-label">
                                        <i class="bi bi-mortarboard me-1"></i>Klasse/Kurs
                                    </label>
                                    <input asp-for="Klasse" class="form-control" required id="Klasse"
                                           placeholder="z.B. FIAE-2023-A" />
                                    <span asp-validation-for="Klasse" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Nachname" class="form-label">
                                        <i class="bi bi-person me-1"></i>Nachname
                                    </label>
                                    <input asp-for="Nachname" class="form-control" required id="Nachname" />
                                    <span asp-validation-for="Nachname" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Vorname" class="form-label">
                                        <i class="bi bi-person me-1"></i>Vorname
                                    </label>
                                    <input asp-for="Vorname" class="form-control" required id="Vorname" />
                                    <span asp-validation-for="Vorname" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center bg-light">
                                <h5 class="mb-0">
                                    <i class="bi bi-calendar3 me-2"></i>Definierte Zeiträume
                                </h5>
                                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#zeitraumModal">
                                    <i class="bi bi-plus-circle me-1"></i>Neuen Zeitraum hinzufügen
                                </button>
                            </div>
                            <div class="card-body">
                                @if (!Model.Zeitraeume.Any())
                                {
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle me-2"></i>
                                        Es wurden noch keine Zeiträume definiert. Bitte fügen Sie mindestens einen Zeitraum hinzu.
                                    </div>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover" id="zeitraeume-table">
                                            <thead class="table-dark">
                                                <tr>
                                                    <th><i class="bi bi-tag me-1"></i>Kategorie</th>
                                                    <th><i class="bi bi-calendar me-1"></i>Von</th>
                                                    <th><i class="bi bi-calendar me-1"></i>Bis</th>
                                                    <th><i class="bi bi-card-text me-1"></i>Beschreibung</th>
                                                    <th><i class="bi bi-gear me-1"></i>Aktion</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < Model.Zeitraeume.Count; i++)
                                                {
                                                    <tr>
                                                        <td>
                                                            <span class="badge bg-@(Model.Zeitraeume[i].Kategorie == "Praktikum" ? "success" : "primary")">
                                                                @Model.Zeitraeume[i].Kategorie
                                                            </span>
                                                        </td>
                                                        <td>@Model.Zeitraeume[i].Start.ToString("dd.MM.yyyy")</td>
                                                        <td>@Model.Zeitraeume[i].Ende.ToString("dd.MM.yyyy")</td>
                                                        <td>@Model.Zeitraeume[i].Beschreibung</td>
                                                        <td>
                                                            <form asp-action="DeleteZeitraum" method="post" class="d-inline">
                                                                <input type="hidden" name="index" value="@i" />
                                                                <button type="submit" class="btn btn-danger btn-sm"
                                                                        onclick="return confirm('Zeitraum wirklich löschen?')">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </form>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>

                                    <!-- Zeitraum-Statistiken -->
                                    <div class="row mt-3">
                                        <div class="col-md-6">
                                            <small class="text-muted">
                                                <i class="bi bi-info-circle me-1"></i>
                                                Praktikum: @Model.Zeitraeume.Count(z => z.Kategorie == "Praktikum") Zeiträume
                                            </small>
                                        </div>
                                        <div class="col-md-6">
                                            <small class="text-muted">
                                                <i class="bi bi-info-circle me-1"></i>
                                                Umschulung: @Model.Zeitraeume.Count(z => z.Kategorie == "Umschulung") Zeiträume
                                            </small>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="text-center mb-4">
                            <button type="submit" class="btn btn-success btn-lg px-5"
                                    disabled="@(!Model.Zeitraeume.Any())" id="generate-button">
                                <i class="bi bi-file-earmark-word me-2"></i>
                                Wochennachweise generieren
                                <br><small class="fw-normal">Client-seitige Erstellung</small>
                            </button>
                            <!-- TEST-BUTTON -->
                            <button type="button" class="btn btn-outline-secondary ms-2" id="test-docxtemplater-button">
                                <i class="bi bi-wrench me-1"></i>
                                Docxtemplater testen
                            </button>

                            @if (!Model.Zeitraeume.Any())
                            {
                                <div class="mt-2">
                                    <small class="text-muted">
                                        <i class="bi bi-exclamation-triangle me-1"></i>
                                        Bitte fügen Sie mindestens einen Zeitraum hinzu
                                    </small>
                                </div>
                            }
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal für neuen Zeitraum -->
<div class="modal fade" id="zeitraumModal" tabindex="-1" aria-labelledby="zeitraumModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="AddZeitraum" asp-controller="Home" method="post" id="zeitraum-add-form">
                @Html.AntiForgeryToken()
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="zeitraumModalLabel">
                        <i class="bi bi-plus-circle me-2"></i>Neuen Zeitraum hinzufügen
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Hidden fields für bestehende Daten -->
                    <input type="hidden" asp-for="Umschulungsbeginn" />
                    <input type="hidden" asp-for="Nachname" />
                    <input type="hidden" asp-for="Vorname" />
                    <input type="hidden" asp-for="Klasse" />

                    <div class="mb-3">
                        <label asp-for="NeuZeitraum.Kategorie" class="form-label">
                            <i class="bi bi-tag me-1"></i>Kategorie
                        </label>
                        <select asp-for="NeuZeitraum.Kategorie" class="form-select">
                            <option value="Umschulung">
                                <i class="bi bi-mortarboard"></i> Umschulung
                            </option>
                            <option value="Praktikum">
                                <i class="bi bi-building"></i> Praktikum
                            </option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NeuZeitraum.Start" class="form-label">
                            <i class="bi bi-calendar-event me-1"></i>Startdatum
                        </label>
                        <input asp-for="NeuZeitraum.Start" type="date" class="form-control" required />
                        <span asp-validation-for="NeuZeitraum.Start" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NeuZeitraum.Ende" class="form-label">
                            <i class="bi bi-calendar-x me-1"></i>Enddatum
                        </label>
                        <input asp-for="NeuZeitraum.Ende" type="date" class="form-control" required />
                        <span asp-validation-for="NeuZeitraum.Ende" class="text-danger"></span>
                    </div>
                    <div class="mb-3">
                        <label asp-for="NeuZeitraum.Beschreibung" class="form-label">
                            <i class="bi bi-card-text me-1"></i>Beschreibung
                        </label>
                        <input asp-for="NeuZeitraum.Beschreibung" class="form-control" required
                               placeholder="z.B. Modul HTML/CSS, Praktikum bei Firma XYZ" />
                        <span asp-validation-for="NeuZeitraum.Beschreibung" class="text-danger"></span>
                        <div class="form-text">
                            Diese Beschreibung wird in allen Wochennachweisen dieses Zeitraums verwendet.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="bi bi-x-circle me-1"></i>Abbrechen
                    </button>
                    <button type="submit" class="btn btn-primary" id="zeitraum-submit-button">
                        <i class="bi bi-plus-circle me-1"></i>Hinzufügen
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Modal-Referenzen
        let zeitraumModal;

        // Modal-Schließen-Funktion global definieren
        window.closeZeitraumModal = function() {
            try {
                // Bootstrap 5 API - korrekte Methode zum Schließen des Modals
                if (zeitraumModal) {
                    zeitraumModal.hide();
                } else {
                    // Fallback für Bootstrap 5
                    const modalElement = document.getElementById('zeitraumModal');
                    if (modalElement) {
                        zeitraumModal = bootstrap.Modal.getInstance(modalElement);
                        if (zeitraumModal) {
                            zeitraumModal.hide();
                        } else {
                            // jQuery Fallback
                            $('#zeitraumModal').modal('hide');
                        }
                    }
                }
                console.log('Modal erfolgreich geschlossen');
            } catch (error) {
                console.error('Fehler beim Schließen des Modals:', error);
                // Letzter Versuch mit jQuery
                try {
                    $('#zeitraumModal').modal('hide');
                } catch (e) {
                    console.error('Auch jQuery-Fallback fehlgeschlagen:', e);
                }
            }
        };

        document.addEventListener('DOMContentLoaded', function () {
            // Modal-Element und -Instanz erfassen
            const modalElement = document.getElementById('zeitraumModal');
            if (modalElement) {
                // Modal-Instanz initialisieren
                zeitraumModal = new bootstrap.Modal(modalElement, {
                    backdrop: 'static', // Modal bleibt geöffnet, wenn Hintergrund angeklickt wird
                    keyboard: false      // Verhindert Schließen durch ESC-Taste
                });

                // Event-Listener für Modal-Events hinzufügen
                modalElement.addEventListener('hidden.bs.modal', function () {
                    console.log('Modal wurde geschlossen - Reset Formular');
                    // Formular zurücksetzen, wenn das Modal geschlossen wird
                    const form = document.getElementById('zeitraum-add-form');
                    if (form) {
                        form.reset();

                        // Auch den Submit-Button zurücksetzen
                        const submitBtn = document.getElementById('zeitraum-submit-button');
                        if (submitBtn) {
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = '<i class="bi bi-plus-circle me-1"></i>Hinzufügen';
                        }
                    }
                });
            }

            // Rest des Codes wie vorher...

            // Verhindern von erneuten Form-Submits nach einem Reload
            if (window.performance && window.performance.navigation.type === window.performance.navigation.TYPE_BACK_FORWARD) {
                console.log('🔄 Seite wurde über Browser-Navigation (zurück/vorwärts) geladen');
                window.location.reload();
            }

            // Modal Vorausfüllung mit aktuellem Datum und +1 Monat
            const openModalButton = document.querySelector('[data-bs-toggle="modal"][data-bs-target="#zeitraumModal"]');
            if (openModalButton) {
                openModalButton.addEventListener('click', function() {
                    // Umschulungsbeginn holen
                    const umschulungsbeginn = document.getElementById('Umschulungsbeginn').value;

                    // Oder aktuelles Datum falls nicht gesetzt
                    const startDate = umschulungsbeginn || new Date().toISOString().split('T')[0];

                    // Enddatum berechnen: Startdatum + 1 Monat
                    const endDateObj = new Date(startDate);
                    endDateObj.setMonth(endDateObj.getMonth() + 1);
                    // Sicherstellen, dass das Format YYYY-MM-DD ist
                    const endDate = endDateObj.toISOString().split('T')[0];

                    // Werte in das Modal setzen
                    document.getElementById('NeuZeitraum_Start').value = startDate;
                    document.getElementById('NeuZeitraum_Ende').value = endDate;

                    // Optional: Fokus auf Beschreibungsfeld setzen
                    setTimeout(() => document.getElementById('NeuZeitraum_Beschreibung').focus(), 500);
                });
            }

            // Formular direkt per AJAX absenden für bessere Kontrolle
            const modalForm = document.getElementById('zeitraum-add-form');
            if (modalForm) {
                modalForm.addEventListener('submit', function(e) {
                    e.preventDefault(); // Standard-Submit verhindern

                    // Datum-Validierung
                    const startInput = document.getElementById('NeuZeitraum_Start');
                    const endeInput = document.getElementById('NeuZeitraum_Ende');
                    const startDate = new Date(startInput.value);
                    const endDate = new Date(endeInput.value);

                    if (endDate < startDate) {
                        alert('Das Enddatum muss nach dem Startdatum liegen.');
                        return false;
                    }

                    console.log('⬆️ Zeitraum-Formular wird abgesendet...');

                    // Prüfen, ob das Formular gültig ist
                    if (!this.checkValidity()) {
                        console.warn('❌ Formular ungültig!');
                        // Bootstrap-Validierung triggern
                        this.classList.add('was-validated');
                        return false;
                    }

                    // Button-Animation starten
                    const submitBtn = document.getElementById('zeitraum-submit-button');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Wird hinzugefügt...';
                    }

                    // Formular per AJAX absenden
                    const formData = new FormData(this);

                    fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => {
                        if (response.redirected) {
                            window.location.href = response.url;
                        } else {
                            // Seite neu laden, wenn kein Redirect
                            window.location.reload();
                        }
                    })
                    .catch(error => {
                        console.error('Fehler beim Absenden des Formulars:', error);

                        // Reset Button bei Fehler
                        if (submitBtn) {
                            submitBtn.disabled = false;
                            submitBtn.innerHTML = '<i class="bi bi-plus-circle me-1"></i>Hinzufügen';
                        }

                        alert('Fehler beim Hinzufügen des Zeitraums: ' + error.message);
                    });

                    return false;
                });
            }

            // Generate-Button State Management
            const generateButton = document.getElementById('generate-button');
            const zeitraeumTable = document.getElementById('zeitraeume-table');

            function updateGenerateButton() {
                const hasZeitraeume = zeitraeumTable && zeitraeumTable.querySelector('tbody tr');
                if (generateButton) {
                    generateButton.disabled = !hasZeitraeume;
                }
            }

            // Initial check
            updateGenerateButton();

            // Debug: Zeige verfügbare Daten
            console.log('🔍 Index.cshtml geladen');
            console.log('📊 Verfügbare Zeiträume:', @Model.Zeitraeume.Count);
        });
    </script>

    @if (TempData["CloseModal"] != null && TempData["CloseModal"].ToString().ToLower() == "true")
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                console.log('🔒 Modal wird geschlossen (TempData-Signal)');
                // Warten, bis DOM vollständig geladen ist
                setTimeout(() => closeZeitraumModal(), 300);
            });
        </script>
    }

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
