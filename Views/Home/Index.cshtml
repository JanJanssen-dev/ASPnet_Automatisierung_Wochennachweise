@model UmschulungConfig
@{
    ViewData["Title"] = "Wochennachweis-Generator";
    var debugEnabled = Context.RequestServices.GetRequiredService<Microsoft.Extensions.Options.IOptions<DebugOptions>>().Value.EnableDebug;
}

<div class="container">
    <!-- DELETE-FORMS für Kompatibilität -->
    @for (int i = 0; i < Model.Zeitraeume.Count; i++)
    {
        <form action="/Home/DeleteZeitraum" method="post" class="delete-zeitraum-form" id="delete-form-@i" style="display: none;">
            <input type="hidden" name="index" value="@i" />
        </form>
    }

    <div class="row justify-content-center">
        <div class="col-lg-12">
            <h1 class="my-4 text-center">
                <i class="bi bi-file-earmark-word text-primary me-2"></i>
                Wochennachweis-Generator
                @if (debugEnabled)
                {
                    <small class="badge bg-warning text-dark ms-2">🔧 DEBUG</small>
                }
            </h1>
            <p class="text-center text-muted mb-4">
                Automatische Erstellung von Wochennachweisen für Umschulung und Praktikum
                <br><small><i class="bi bi-cpu me-1"></i>Alle Daten bleiben in Ihrem Browser - keine Server-Übertragung</small>
            </p>

            @if (TempData["StatusMessage"] != null)
            {
                <div class="alert alert-@(TempData["StatusMessageType"] ?? "success") alert-dismissible fade show" role="alert">
                    <i class="bi bi-@(TempData["StatusMessageType"]?.ToString() == "danger" ? "exclamation-triangle" : "check-circle") me-2"></i>@TempData["StatusMessage"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <!-- TEMPLATE-UPLOAD-SEKTION -->
            <div class="card mb-4 shadow-sm border-info">
                <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-file-earmark-word me-2"></i>Template-Einstellungen
                    </h5>
                    <a asp-action="TemplateHelp" class="btn btn-sm btn-outline-light">
                        <i class="bi bi-question-circle me-1"></i>Platzhalter-Hilfe
                    </a>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label class="form-label">
                                    <i class="bi bi-upload me-1"></i>Eigenes Template hochladen (optional)
                                </label>
                                <input type="file" class="form-control" id="template-upload" accept=".docx" />
                                <div class="form-text">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Word-Vorlage (.docx) mit Platzhaltern wie {{NACHNAME}}, {{WOCHE}}, etc.
                                    <a asp-action="TemplateHelp" class="text-decoration-none">→ Alle Platzhalter anzeigen</a>
                                </div>
                                <div id="template-status" class="mt-2"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Template-Status</label>
                                <div class="p-2 bg-light rounded">
                                    <div id="current-template-info">
                                        <small class="text-muted">
                                            <i class="bi bi-file-earmark-word me-1"></i>
                                            Standard-Template aktiv
                                        </small>
                                    </div>
                                </div>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-secondary" id="reset-template-btn">
                                        <i class="bi bi-arrow-clockwise me-1"></i>Standard wiederherstellen
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- HAUPTFORMULAR -->
            <div class="card mb-4 shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-person-circle me-2"></i>Grunddaten
                    </h5>
                    <button type="button" class="btn btn-sm btn-outline-light" onclick="resetAll()">
                        <i class="bi bi-arrow-clockwise me-1"></i>Alles zurücksetzen
                    </button>
                </div>
                <div class="card-body">
                    <form action="/Home/Generate" method="post" id="wochennachweis-form">
                        <div class="row">
                            <div class="col-lg-3 col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Umschulungsbeginn" class="form-label">
                                        <i class="bi bi-calendar-event me-1"></i>Beginn der Umschulung *
                                    </label>
                                    <input asp-for="Umschulungsbeginn" class="form-control" type="date" required id="Umschulungsbeginn" />
                                    <span asp-validation-for="Umschulungsbeginn" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6">
                                <div class="mb-3">
                                    <label asp-for="UmschulungsEnde" class="form-label">
                                        <i class="bi bi-calendar-x me-1"></i>Ende der Umschulung *
                                    </label>
                                    <input asp-for="UmschulungsEnde" class="form-control" type="date" required id="UmschulungsEnde" />
                                    <span asp-validation-for="UmschulungsEnde" class="text-danger"></span>
                                    <div class="form-text">Fallback falls keine Zeiträume definiert</div>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Nachname" class="form-label">
                                        <i class="bi bi-person me-1"></i>Nachname *
                                    </label>
                                    <input asp-for="Nachname" class="form-control" required id="Nachname" />
                                    <span asp-validation-for="Nachname" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-lg-3 col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Vorname" class="form-label">
                                        <i class="bi bi-person me-1"></i>Vorname *
                                    </label>
                                    <input asp-for="Vorname" class="form-control" required id="Vorname" />
                                    <span asp-validation-for="Vorname" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-lg-4 col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Klasse" class="form-label">
                                        <i class="bi bi-mortarboard me-1"></i>Klasse/Kurs *
                                    </label>
                                    <input asp-for="Klasse" class="form-control" required id="Klasse" placeholder="z.B. FIAE-2023-A" />
                                    <span asp-validation-for="Klasse" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-lg-4 col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Bundesland" class="form-label">
                                        <i class="bi bi-geo-alt me-1"></i>Bundesland (für Feiertage) *
                                    </label>
                                    <select asp-for="Bundesland" class="form-select" required id="Bundesland">
                                        @foreach (var bundesland in UmschulungConfig.BundeslaenderListe)
                                        {
                                            <option value="@bundesland.Key" selected="@(Model.Bundesland == bundesland.Key)">
                                                @bundesland.Value
                                            </option>
                                        }
                                    </select>
                                    <span asp-validation-for="Bundesland" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-lg-4 col-md-12">
                                <div class="mb-3">
                                    <label class="form-label">
                                        <i class="bi bi-pen me-1"></i>Signatur (optional)
                                    </label>
                                    <input type="file" class="form-control" id="signatur-upload" accept="image/jpeg,image/jpg,image/png" />
                                    <div class="form-text">JPG/PNG, max. 2MB</div>
                                    @if (!string.IsNullOrEmpty(Model.SignaturDateiname))
                                    {
                                        <small class="text-success">✅ @Model.SignaturDateiname</small>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- INLINE ZEITRÄUME-EINGABE -->
                        <div class="card mb-4">
                            <div class="card-header d-flex justify-content-between align-items-center bg-light">
                                <h5 class="mb-0">
                                    <i class="bi bi-calendar3 me-2"></i>Zeiträume definieren
                                    <span class="badge bg-secondary" id="zeitraeume-count">@Model.Zeitraeume.Count</span>
                                </h5>
                                <small class="text-muted">
                                    <i class="bi bi-info-circle me-1"></i>Pro Tag nur ein Zeitraum möglich
                                </small>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped" id="zeitraeume-table">
                                        <thead class="table-dark">
                                            <tr>
                                                <th width="15%">Kategorie</th>
                                                <th width="20%">Von</th>
                                                <th width="20%">Bis</th>
                                                <th width="35%">Beschreibung</th>
                                                <th width="10%">Aktion</th>
                                            </tr>
                                        </thead>
                                        <tbody id="zeitraeume-tbody">
                                            <!-- Bestehende Zeiträume -->
                                            @for (int i = 0; i < Model.Zeitraeume.Count; i++)
                                            {
                                                <tr data-index="@i">
                                                    <td>
                                                        <span class="badge @(Model.Zeitraeume[i].KategorieBadgeClass)">
                                                            @Model.Zeitraeume[i].Kategorie
                                                        </span>
                                                    </td>
                                                    <td>@Model.Zeitraeume[i].Start.ToString("dd.MM.yyyy")</td>
                                                    <td>@Model.Zeitraeume[i].Ende.ToString("dd.MM.yyyy")</td>
                                                    <td>@Model.Zeitraeume[i].Beschreibung</td>
                                                    <td>
                                                        <button type="button" class="btn btn-danger btn-sm"
                                                                onclick="deleteZeitraum(@i)" title="Zeitraum löschen">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }

                                            <!-- Neue Eingabe-Zeile -->
                                            <tr id="neue-eingabe-zeile" class="table-info">
                                                <td>
                                                    <select class="form-select form-select-sm" id="neue-kategorie" required>
                                                        <option value="">Wählen...</option>
                                                        <option value="Umschulung">Umschulung</option>
                                                        <option value="Praktikum">Praktikum</option>
                                                    </select>
                                                </td>
                                                <td>
                                                    <input type="date" class="form-control form-control-sm" id="neues-start" required />
                                                </td>
                                                <td>
                                                    <input type="date" class="form-control form-control-sm" id="neues-ende" required />
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control form-control-sm" id="neue-beschreibung"
                                                           placeholder="z.B. Modul HTML/CSS" required maxlength="500" />
                                                </td>
                                                <td>
                                                    <button type="button" class="btn btn-success btn-sm" id="hinzufuegen-btn"
                                                            onclick="addZeitraumInline()" title="Zeitraum hinzufügen">
                                                        <i class="bi bi-plus-circle"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>

                                <!-- Überschneidungs-Warnung -->
                                <div id="ueberschneidungs-warnung" class="alert alert-danger d-none">
                                    <h6><i class="bi bi-exclamation-triangle me-2"></i>Überschneidung erkannt!</h6>
                                    <p class="mb-2">Der neue Zeitraum überschneidet sich mit:</p>
                                    <ul id="ueberschneidende-zeitraeume"></ul>
                                    <p class="mb-0"><strong>Pro Tag ist nur ein Zeitraum erlaubt.</strong></p>
                                </div>

                                @if (!Model.Zeitraeume.Any())
                                {
                                    <div class="alert alert-info">
                                        <i class="bi bi-info-circle me-2"></i>
                                        <strong>Keine Zeiträume definiert.</strong>
                                        Fügen Sie Zeiträume hinzu oder lassen Sie leer für automatische Generierung bis zum Ende der Umschulung.
                                    </div>
                                }
                                else
                                {
                                    <div class="mt-3">
                                        <small class="text-muted">
                                            <i class="bi bi-graph-up me-1"></i>
                                            Praktikum: @Model.Zeitraeume.Count(z => z.Kategorie == "Praktikum") •
                                            Umschulung: @Model.Zeitraeume.Count(z => z.Kategorie == "Umschulung") •
                                            Gesamt: @Model.Zeitraeume.Sum(z => z.AnzahlTage) Tage
                                        </small>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- GENERATE-BUTTON -->
                        <div class="text-center mb-4">
                            <button type="button" class="btn btn-success btn-lg px-5" id="generate-button"
                                    onclick="document.getElementById('wochennachweis-form').submit();">
                                <i class="bi bi-file-earmark-word me-2"></i>
                                Wochennachweise generieren
                                <br><small class="fw-normal">Client-seitige Erstellung mit ZIP-Unterordnern</small>
                            </button>

                            @if (debugEnabled)
                            {
                                <button type="button" class="btn btn-outline-secondary ms-2" id="test-docxtemplater-button">
                                    <i class="bi bi-wrench me-1"></i>Docxtemplater testen
                                </button>
                            }
                        </div>
                    </form>
                </div>
            </div>

            <!-- INFO-KARTEN -->
            <div class="row">
                <div class="col-md-6">
                    <div class="card mb-4 border-info">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0"><i class="bi bi-lightbulb me-2"></i>Tipps</h6>
                        </div>
                        <div class="card-body">
                            <ul class="mb-0">
                                <li>Definieren Sie alle Zeiträume von Beginn bis Ende</li>
                                <li>Feiertage werden automatisch erkannt</li>
                                <li>ZIP-Download enthält Praktikum/- und Umschulung/-Ordner</li>
                                <li>Überschneidungen werden automatisch erkannt</li>
                                <li>Enter-Taste zum schnellen Hinzufügen</li>
                                <li><strong>Eigenes Template:</strong> Verwenden Sie Platzhalter wie {{NACHNAME}}</li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card mb-4 border-secondary">
                        <div class="card-header bg-secondary text-white">
                            <h6 class="mb-0"><i class="bi bi-question-circle me-2"></i>Hilfe</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <a asp-action="Help" class="btn btn-outline-primary btn-sm">
                                    <i class="bi bi-book me-1"></i>Ausführliche Anleitung
                                </a>
                                <a asp-action="TemplateHelp" class="btn btn-outline-info btn-sm">
                                    <i class="bi bi-file-earmark-word me-1"></i>Template-Platzhalter
                                </a>
                                @if (debugEnabled)
                                {
                                    <button type="button" class="btn btn-outline-warning btn-sm" onclick="debugDOMElements()">
                                        <i class="bi bi-bug me-1"></i>Debug DOM
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // GLOBALE VARIABLEN - ERWEITERT
        var DEBUG_ENABLED = @(debugEnabled.ToString().ToLower());
        var ZEITRAEUME_COUNT = @Model.Zeitraeume.Count;
        var customTemplate = null; // Für hochgeladenes Template

        // 🔧 NEU: Globale Template-Variable für bessere Kontrolle
        window.customTemplateData = null;

        // DOM READY EVENT
        document.addEventListener('DOMContentLoaded', function () {
            console.log('🚀 INDEX.CSHTML geladen');
            initializeTooltips();
            initializeFormValidation();
            initializeSignaturUpload();
            initializeInlineZeitraumEingabe();
            initializeTemplateUploadFixed(); // 🔧 REPARIERTE FUNKTION
            initializeGenerateButtonFixed(); // 🔧 NEU: Reparierter Generate-Button
        });

        // 🔧 REPARIERTE FUNKTION: Generate-Button mit Generator-Wartefunktion
                function initializeGenerateButtonFixed() {
            const generateForm = document.querySelector('form[action="/Home/Generate"]');
            const generateButton = document.getElementById('generate-button');

            if (generateForm && generateButton) {
                // Entferne den ursprünglichen onclick-Handler
                generateButton.removeAttribute('onclick');

                // 🔧 KRITISCH: Neuer Event-Handler mit verbesserter Generator-Suche
                generateButton.addEventListener('click', async function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    console.log('📝 Generate-Button geklickt...');

                    // Prüfe ob eigenes Template vorhanden ist
                    if (window.customTemplateData || customTemplate) {
                        console.log('📄 Eigenes Template erkannt - verwende Client-seitige Generierung');

                        // 🔧 VERBESSERTE Generator-Suche
                        const findGenerator = () => {
                            return window.wochennachweisGenerator ||
                                   window.ClientWochennachweisGenerator ||
                                   // Fallback: Suche in globalen Objekten
                                   (typeof wochennachweisGenerator !== 'undefined' ? wochennachweisGenerator : null);
                        };

                        let generator = findGenerator();

                        if (generator) {
                            try {
                                console.log('✅ Generator gefunden:', generator.constructor.name || 'Generator');
                                await generator.generateDocuments();
                            } catch (error) {
                                console.error('❌ Client-seitige Generierung fehlgeschlagen:', error);
                                showAlert('Fehler bei der Client-seitigen Generierung: ' + error.message, 'danger');
                            }
                        } else {
                            // Generator noch nicht verfügbar, erweiterte Wartefunktion
                            console.log('⏳ Generator nicht sofort verfügbar, verwende erweiterte Wartefunktion...');

                            let waitAttempts = 0;
                            const maxWaitAttempts = 20; // Erhöht von 10 auf 20

                            const waitForGenerator = async () => {
                                waitAttempts++;
                                generator = findGenerator();

                                if (generator) {
                                    console.log('✅ Generator verfügbar nach', waitAttempts, 'Versuchen');
                                    try {
                                        await generator.generateDocuments();
                                    } catch (error) {
                                        console.error('❌ Client-seitige Generierung fehlgeschlagen:', error);
                                        showAlert('Fehler bei der Client-seitigen Generierung: ' + error.message, 'danger');
                                    }
                                } else if (waitAttempts < maxWaitAttempts) {
                                    setTimeout(waitForGenerator, 150); // Reduziert von 200ms auf 150ms
                                } else {
                                    console.error('❌ Generator nach', maxWaitAttempts, 'Versuchen nicht verfügbar');
                                    console.log('🔍 Debug-Info:');
                                    console.log('- window.wochennachweisGenerator:', typeof window.wochennachweisGenerator);
                                    console.log('- Alle window.generator*:', Object.keys(window).filter(k => k.includes('generator')));

                                    // Biete alternative Optionen
                                    if (confirm('Generator nicht verfügbar. Möchten Sie die Server-seitige Generierung verwenden? (Verwendet Standard-Template)')) {
                                        generateForm.submit();
                                    } else {
                                        showAlert('Generierung abgebrochen. Versuchen Sie es erneut oder laden Sie die Seite neu.', 'warning');
                                    }
                                }
                            };

                            waitForGenerator();
                        }
                    } else {
                        console.log('📄 Kein eigenes Template - verwende Server-seitige Generierung');

                        // Standard-Formular-Submit für Server-seitige Generierung
                        generateForm.submit();
                    }
                });

                // 🔧 ZUSÄTZLICH: Überschreibe auch das Formular-Submit-Event
                generateForm.addEventListener('submit', function(e) {
                    // Wenn eigenes Template vorhanden, verhindere Standard-Submit
                    if (window.customTemplateData || customTemplate) {
                        e.preventDefault();
                        e.stopPropagation();

                        console.log('🔄 Form-Submit abgefangen - verwende Client-seitige Generierung');

                        // Trigger den Button-Click-Handler
                        generateButton.click();

                        return false;
                    }

                    // Sonst normaler Submit
                    console.log('📝 Standard Form-Submit für Server-seitige Generierung');
                });

                console.log('✅ Generate-Button repariert für Template-Support');
            }
        }

        // 🔧 REPARIERTE TEMPLATE-UPLOAD-FUNKTION
        function initializeTemplateUploadFixed() {
            const templateUpload = document.getElementById('template-upload');
            const templateStatus = document.getElementById('template-status');
            const currentTemplateInfo = document.getElementById('current-template-info');
            const resetTemplateBtn = document.getElementById('reset-template-btn');

            if (templateUpload) {
                templateUpload.addEventListener('change', async function(e) {
                    const file = e.target.files[0];
                    if (!file) return;

                    // Validierung
                    if (!file.name.toLowerCase().endsWith('.docx')) {
                        showAlert('Bitte nur .docx Dateien hochladen!', 'warning');
                        templateUpload.value = '';
                        return;
                    }

                    if (file.size > 10 * 1024 * 1024) { // 10MB Limit
                        showAlert('Datei ist zu groß. Maximum 10MB erlaubt.', 'warning');
                        templateUpload.value = '';
                        return;
                    }

                    try {
                        // Template als ArrayBuffer lesen
                        const arrayBuffer = await file.arrayBuffer();

                        // 🔧 KRITISCH: Alle Template-Referenzen setzen
                        customTemplate = arrayBuffer;
                        window.customTemplateData = arrayBuffer;

                        // Generator-Template SOFORT überschreiben
                        if (window.wochennachweisGenerator) {
                            window.wochennachweisGenerator.template = arrayBuffer;
                            console.log('✅ Template im Generator aktualisiert:', arrayBuffer.byteLength, 'Bytes');
                        }

                        // Status anzeigen
                        templateStatus.innerHTML = `
                            <div class="alert alert-success">
                                <i class="bi bi-check-circle me-2"></i>
                                Eigenes Template geladen: <strong>${file.name}</strong> (${(file.size / 1024).toFixed(1)} KB)
                                <br><small class="text-muted">Template wird bei der nächsten Generierung automatisch verwendet</small>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-info me-2" onclick="testUploadedTemplate()">
                                        <i class="bi bi-wrench me-1"></i>Template testen
                                    </button>
                                    <span class="badge bg-info">Client-seitige Generierung aktiv</span>
                                </div>
                            </div>
                        `;

                        currentTemplateInfo.innerHTML = `
                            <small class="text-success">
                                <i class="bi bi-file-earmark-word me-1"></i>
                                Eigenes Template: ${file.name}
                            </small>
                        `;

                        showAlert('Template erfolgreich hochgeladen! Die Generierung verwendet jetzt automatisch Ihr Template.', 'success');

                    } catch (error) {
                        console.error('❌ Template-Upload Fehler:', error);
                        showAlert('Fehler beim Laden des Templates: ' + error.message, 'danger');
                        templateUpload.value = '';
                        customTemplate = null;
                        window.customTemplateData = null;
                        if (window.wochennachweisGenerator) {
                            window.wochennachweisGenerator.template = null;
                        }
                    }
                });
            }

            // Reset-Button
            if (resetTemplateBtn) {
                resetTemplateBtn.addEventListener('click', function() {
                    if (confirm('Standard-Template wiederherstellen?')) {
                        customTemplate = null;
                        window.customTemplateData = null;

                        // Generator zurücksetzen
                        if (window.wochennachweisGenerator) {
                            window.wochennachweisGenerator.template = null;
                            console.log('✅ Generator-Template zurückgesetzt');
                        }

                        templateUpload.value = '';
                        templateStatus.innerHTML = '';
                        currentTemplateInfo.innerHTML = `
                            <small class="text-muted">
                                <i class="bi bi-file-earmark-word me-1"></i>
                                Standard-Template aktiv
                            </small>
                        `;

                        showAlert('Standard-Template wiederhergestellt! Die Generierung verwendet wieder das Standard-Template.', 'success');
                    }
                });
            }
        }

        // 🔧 NEU: Template-Test-Funktion
        function testUploadedTemplate() {
            if (!window.customTemplateData && !customTemplate) {
                showAlert('Kein eigenes Template geladen!', 'warning');
                return;
            }

            try {
                console.log('🔧 Teste hochgeladenes Template...');

                const templateToTest = window.customTemplateData || customTemplate;

                // Test-Daten
                const testData = {
                    NACHNAME: 'TestUser',
                    VORNAME: 'Template',
                    WOCHE: '1',
                    KATEGORIE: 'Test',
                    DATUM: '01.01.2024',
                    UDATUM: '06.01.2024',
                    KLASSE: 'TEST-2024',
                    MONAT: 'Januar',
                    JAHR: '2024',
                    EINTRAG1: 'Template-Test erfolgreich!',
                    EINTRAG2: 'Eigenes Template funktioniert',
                    EINTRAG3: 'Platzhalter werden korrekt ersetzt',
                    EINTRAG4: 'Docxtemplater arbeitet ordnungsgemäß',
                    EINTRAG5: 'Download wird gestartet',
                    EINTRAG6: 'Test erfolgreich abgeschlossen'
                };

                // Dokument erstellen
                const zip = new PizZip(templateToTest);
                const doc = new docxtemplater();
                doc.loadZip(zip);
                doc.setOptions({
                    paragraphLoop: true,
                    linebreaks: true,
                    delimiters: { start: '{{', end: '}}' }
                });

                doc.setData(testData);
                doc.render();

                const output = doc.getZip().generate({
                    type: 'blob',
                    mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                });

                // Download starten
                const link = document.createElement('a');
                const url = URL.createObjectURL(output);
                link.href = url;
                link.download = `Template-Test-${new Date().getTime()}.docx`;
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                setTimeout(() => URL.revokeObjectURL(url), 1000);

                showAlert('✅ Template-Test erfolgreich! Test-Dokument wird heruntergeladen.', 'success');

            } catch (error) {
                console.error('❌ Template-Test Fehler:', error);
                showAlert('Template-Test fehlgeschlagen: ' + error.message, 'danger');
            }
        }

        // INLINE ZEITRAUM-EINGABE
        function initializeInlineZeitraumEingabe() {
            const heute = new Date().toISOString().split('T')[0];
            const startInput = document.getElementById('neues-start');
            const endeInput = document.getElementById('neues-ende');

            if (startInput && !startInput.value) {
                startInput.value = heute;
            }

            if (endeInput && !endeInput.value && startInput) {
                const startDate = new Date(startInput.value || heute);
                startDate.setDate(startDate.getDate() + 6);
                endeInput.value = startDate.toISOString().split('T')[0];
            }

            // Event-Listener
            if (startInput) {
                startInput.addEventListener('change', function() {
                    if (endeInput && (!endeInput.value || new Date(endeInput.value) <= new Date(this.value))) {
                        const newEndDate = new Date(this.value);
                        newEndDate.setDate(newEndDate.getDate() + 6);
                        endeInput.value = newEndDate.toISOString().split('T')[0];
                    }
                });
            }

            // Enter-Taste Handler
            ['neue-kategorie', 'neues-start', 'neues-ende', 'neue-beschreibung'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            addZeitraumInline();
                        }
                    });
                }
            });
        }

        async function addZeitraumInline() {
            const kategorie = document.getElementById('neue-kategorie').value;
            const start = document.getElementById('neues-start').value;
            const ende = document.getElementById('neues-ende').value;
            const beschreibung = document.getElementById('neue-beschreibung').value;

            // Validierung
            if (!kategorie || !start || !ende || !beschreibung) {
                showAlert('Bitte alle Felder ausfüllen!', 'warning');
                return;
            }

            if (new Date(ende) <= new Date(start)) {
                showAlert('Das Enddatum muss nach dem Startdatum liegen!', 'warning');
                return;
            }

            const btn = document.getElementById('hinzufuegen-btn');
            const originalHTML = btn.innerHTML;
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Prüfe...';

            try {
                // Überschneidung prüfen
                const overlap = await checkUeberschneidung({ kategorie, start, ende, beschreibung });

                if (overlap.hasOverlap) {
                    showUeberschneidungsWarnung(overlap.overlappingPeriods);
                    return;
                }

                // Zeitraum hinzufügen
                const formData = new FormData();
                formData.append('NeuerZeitraum.Kategorie', kategorie);
                formData.append('NeuerZeitraum.Start', start);
                formData.append('NeuerZeitraum.Ende', ende);
                formData.append('NeuerZeitraum.Beschreibung', beschreibung);

                // Grunddaten mitschicken
                formData.append('Nachname', document.getElementById('Nachname').value || '');
                formData.append('Vorname', document.getElementById('Vorname').value || '');
                formData.append('Klasse', document.getElementById('Klasse').value || '');
                formData.append('Bundesland', document.getElementById('Bundesland').value || '');
                formData.append('Umschulungsbeginn', document.getElementById('Umschulungsbeginn').value || '');
                formData.append('UmschulungsEnde', document.getElementById('UmschulungsEnde').value || '');

                const response = await fetch('/Home/AddZeitraumInline', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert(result.message, 'danger');
                }

            } catch (error) {
                console.error('❌ Fehler beim Hinzufügen:', error);
                showAlert('Fehler: ' + error.message, 'danger');
            } finally {
                btn.disabled = false;
                btn.innerHTML = originalHTML;
            }
        }

        async function checkUeberschneidung(zeitraum) {
            try {
                const response = await fetch('/Home/CheckUeberschneidung', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(zeitraum)
                });
                return await response.json();
            } catch (error) {
                console.error('❌ Überschneidungsprüfung Fehler:', error);
                return { hasOverlap: false };
            }
        }

        function showUeberschneidungsWarnung(overlappingPeriods) {
            const warnDiv = document.getElementById('ueberschneidungs-warnung');
            const listDiv = document.getElementById('ueberschneidende-zeitraeume');

            if (warnDiv && listDiv) {
                listDiv.innerHTML = overlappingPeriods.map(period => `<li>${period}</li>`).join('');
                warnDiv.classList.remove('d-none');
                setTimeout(() => warnDiv.classList.add('d-none'), 10000);
            }
        }

        // DELETE FUNCTION
        function deleteZeitraum(index) {
            if (confirm('Zeitraum wirklich löschen?')) {
                const form = document.getElementById('delete-form-' + index);
                if (form) {
                    form.submit();
                } else {
                    // Fallback
                    const fallbackForm = document.createElement('form');
                    fallbackForm.method = 'POST';
                    fallbackForm.action = '/Home/DeleteZeitraum';
                    const indexInput = document.createElement('input');
                    indexInput.type = 'hidden';
                    indexInput.name = 'index';
                    indexInput.value = index;
                    fallbackForm.appendChild(indexInput);
                    document.body.appendChild(fallbackForm);
                    fallbackForm.submit();
                }
            }
        }

        // SIGNATUR-UPLOAD
        function initializeSignaturUpload() {
            const uploadInput = document.getElementById('signatur-upload');
            if (uploadInput) {
                uploadInput.addEventListener('change', async function(e) {
                    const file = e.target.files[0];
                    if (!file) return;

                    const formData = new FormData();
                    formData.append('signaturFile', file);

                    try {
                        const response = await fetch('/Home/UploadSignatur', {
                            method: 'POST',
                            body: formData
                        });

                        const result = await response.json();

                        if (result.success) {
                            showAlert(result.message, 'success');
                        } else {
                            showAlert(result.message, 'danger');
                            uploadInput.value = '';
                        }
                    } catch (error) {
                        console.error('❌ Upload-Fehler:', error);
                        showAlert('Upload fehlgeschlagen: ' + error.message, 'danger');
                        uploadInput.value = '';
                    }
                });
            }
        }

        // RESET-FUNKTION
        function resetAll() {
            if (confirm('Wirklich alle Daten zurücksetzen?')) {
                // Template auch zurücksetzen
                customTemplate = null;
                window.customTemplateData = null;
                if (window.wochennachweisGenerator) {
                    window.wochennachweisGenerator.template = null;
                }

                if (typeof sessionStorage !== 'undefined') sessionStorage.clear();
                if (typeof localStorage !== 'undefined') localStorage.clear();

                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/Home/Reset';
                document.body.appendChild(form);
                form.submit();
            }
        }

        // HILFSFUNKTIONEN
        function initializeTooltips() {
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl, { html: true });
            });
        }

        function initializeFormValidation() {
            const forms = document.querySelectorAll('form');
            forms.forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                });
            });
        }

        function showAlert(message, type) {
            if (typeof Swal !== 'undefined') {
                const icon = type === 'success' ? 'success' : type === 'danger' ? 'error' : 'warning';
                Swal.fire({
                    icon: icon,
                    title: type === 'success' ? 'Erfolgreich!' : type === 'danger' ? 'Fehler!' : 'Hinweis',
                    text: message,
                    timer: type === 'success' ? 3000 : undefined,
                    showConfirmButton: type !== 'success'
                });
            } else {
                alert(message);
            }
        }

                // 🔧 TIMING-FIX: Generator-Override mit verbesserter Erkennung
        function setupGeneratorOverride() {
            // Prüfe alle möglichen Generator-Referenzen
            const generator = window.wochennachweisGenerator || window.ClientWochennachweisGenerator;

            if (generator) {

                // 1. Überschreibe loadTemplate Methode
                const originalLoadTemplate = generator.loadTemplate;
                generator.loadTemplate = async function() {
                    // Prüfe auf eigenes Template
                    if (window.customTemplateData) {
                        console.log('📄 Verwende eigenes Template (global)');
                        this.template = window.customTemplateData;
                        return;
                    }

                    if (customTemplate) {
                        console.log('📄 Verwende eigenes Template (lokal)');
                        this.template = customTemplate;
                        return;
                    }

                    // Lade Standard-Template
                    if (originalLoadTemplate) {
                        await originalLoadTemplate.call(this);
                    } else {
                        const response = await fetch('/api/wochennachweis/template');
                        if (response.ok) {
                            this.template = await response.arrayBuffer();
                        }
                    }
                };

                // 2. Überschreibe createDocument für Template-Kontrolle
                const originalCreateDocument = generator.createDocument;
                generator.createDocument = async function(wochenData) {
                    // Template-Check vor jeder Erstellung
                    if (window.customTemplateData && this.template !== window.customTemplateData) {
                        console.log('🔄 Korrigiere Template auf eigenes Template');
                        this.template = window.customTemplateData;
                    }

                    if (!this.template) {
                        await this.loadTemplate();
                    }

                    return await originalCreateDocument.call(this, wochenData);
                };

                console.log('✅ Template-Override erfolgreich installiert für:', generator.constructor.name || 'Generator');
                return true;
            } else {
                // Debugging: Zeige verfügbare Window-Properties
                const generatorProps = Object.keys(window).filter(key =>
                    key.toLowerCase().includes('generator') ||
                    key.toLowerCase().includes('wochennachweis')
                );

                if (generatorProps.length > 0) {
                    console.log('🔍 Gefundene Generator-Properties:', generatorProps);
                }

                console.log('⚠️ Generator noch nicht verfügbar, versuche erneut...');
                return false;
            }
        }

        // Versuche Generator-Override mit erweiterten Versuchen
        let overrideAttempts = 0;
        const maxAttempts = 15; // Erhöht von 10 auf 15

        function attemptGeneratorOverride() {
            overrideAttempts++;

            if (setupGeneratorOverride()) {
                console.log('✅ Generator-Override erfolgreich nach', overrideAttempts, 'Versuchen');
                return;
            }

            if (overrideAttempts < maxAttempts) {
                setTimeout(attemptGeneratorOverride, 300); // Reduziert von 500ms auf 300ms
            } else {
                console.warn('❌ Generator-Override fehlgeschlagen nach', maxAttempts, 'Versuchen');
                console.log('🔍 Verfügbare Window-Properties für Debug:');
                console.log('- window.wochennachweisGenerator:', !!window.wochennachweisGenerator);
                console.log('- typeof window.wochennachweisGenerator:', typeof window.wochennachweisGenerator);

                // Letzer Versuch mit direkter Referenz-Erstellung
                setTimeout(() => {
                    if (window.wochennachweisGenerator) {
                        console.log('🔄 Letzter Versuch: Generator nach Timeout gefunden');
                        setupGeneratorOverride();
                    }
                }, 2000);
            }
        }

        // 🔧 NEUER ANSATZ: Warte auf DOMContentLoaded UND Generator
        document.addEventListener('DOMContentLoaded', function() {
            // Starte Override-Versuche erst nach DOM-Load
            setTimeout(() => {
                console.log('🔧 Starte Generator-Override-Versuche...');
                attemptGeneratorOverride();
            }, 200);
        });

        // 🔧 ZUSÄTZLICHER HOOK: Observer für Generator-Erstellung
        const generatorObserver = setInterval(() => {
            if (window.wochennachweisGenerator && overrideAttempts >= maxAttempts) {
                console.log('🎯 Generator durch Observer gefunden!');
                clearInterval(generatorObserver);
                setupGeneratorOverride();
            }
        }, 1000);

        // Stoppe Observer nach 30 Sekunden
        setTimeout(() => {
            clearInterval(generatorObserver);
            console.log('🛑 Generator-Observer gestoppt');
        }, 30000);

        // DEBUG-FUNKTIONEN (nur wenn Debug aktiv)
        @if (debugEnabled)
        {
                <text>
                function debugDOMElements() {
                    console.log('🔍 DOM DEBUG REPORT:');
                    console.log('=====================================');

                    console.log('📋 Generate-Button:');
                    const generateBtn = document.getElementById('generate-button');
                    console.log('  Button gefunden:', !!generateBtn);
                    if (generateBtn) {
                        console.log('  onclick-Attribut:', generateBtn.getAttribute('onclick'));
                        console.log('  Event-Listener:', generateBtn.onclick);
                    }

                    console.log('📋 Template-Status:');
                    console.log('  customTemplate:', !!customTemplate);
                    console.log('  window.customTemplateData:', !!window.customTemplateData);
                    console.log('  Generator Template:', window.wochennachweisGenerator ? !!window.wochennachweisGenerator.template : 'Generator nicht verfügbar');

                    console.log('📋 Alle Forms:');
                    document.querySelectorAll('form').forEach(function(form, i) {
                        console.log('  ' + (i+1) + ': {id: "' + form.id + '", action: "' + form.action + '", method: "' + form.method + '"}');
                    });

                    console.log('=====================================');
                }

                // Template-Debug-Funktionen
                window.debugTemplate = function() {
                    console.log('🔧 === TEMPLATE DEBUG ===');
                    console.log('Custom Template geladen (global):', !!window.customTemplateData);
                    console.log('Custom Template geladen (lokal):', !!customTemplate);
                    if (window.customTemplateData) {
                        console.log('  Größe (global):', window.customTemplateData.byteLength, 'Bytes');
                    }
                    if (customTemplate) {
                        console.log('  Größe (lokal):', customTemplate.byteLength, 'Bytes');
                    }

                    console.log('Generator verfügbar:', !!window.wochennachweisGenerator);
                    if (window.wochennachweisGenerator) {
                        console.log('  Generator Template:', !!window.wochennachweisGenerator.template);
                        if (window.wochennachweisGenerator.template) {
                            console.log('  Generator Template Größe:', window.wochennachweisGenerator.template.byteLength, 'Bytes');
                        }
                    }
                };

                console.log('🔧 INDEX.CSHTML DEBUG AKTIV');
                console.log('🔧 Debug-Funktionen verfügbar: debugDOMElements(), debugTemplate(), testUploadedTemplate()');
                </text>
        }

        console.log('📋 Index-Page JavaScript mit repariertem Template-Upload und Generate-Button geladen');
        console.log('📄 Template-Upload: Automatische Weiterleitung zur Client-seitigen Generierung bei eigenem Template');
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
