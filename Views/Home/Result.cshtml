@model List<Wochennachweis>
@{
    ViewData["Title"] = "Wochennachweis-Übersicht";
}

<div class="text-center mb-4">
    <h1 class="display-4">📋 Wochennachweis-Übersicht</h1>
    <p>Für @ViewBag.Nachname wurden @Model.Count Wochennachweise berechnet.</p>

    <!-- 🔥 ERWEITERTE DOWNLOAD-SEKTION -->
    <div class="alert alert-success">
        <h5><i class="bi bi-download me-2"></i>Dokumente erstellen und herunterladen</h5>
        <p class="mb-3">Klicken Sie auf den Button unten, um alle Wochennachweise als Word-Dokumente zu generieren.</p>

        <!-- HAUPT-DOWNLOAD-BUTTON -->
        <button type="button" class="btn btn-success btn-lg me-3" id="download-all-button">
            <i class="bi bi-file-earmark-word me-2"></i>
            Alle Dokumente als ZIP herunterladen
            <br><small class="fw-normal">Mit Unterordnern: Praktikum/ und Umschulung/</small>
        </button>

        <!-- ZUSÄTZLICHE OPTIONEN -->
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary" id="test-generation-button">
                <i class="bi bi-gear me-1"></i>
                System testen
            </button>
            <button type="button" class="btn btn-outline-info" id="show-statistics-button">
                <i class="bi bi-graph-up me-1"></i>
                Statistiken
            </button>
        </div>
    </div>

    <!-- FORTSCHRITTSANZEIGE -->
    <div id="generation-progress" style="display: none;" class="alert alert-info">
        <div class="d-flex align-items-center justify-content-center">
            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
            <span id="progress-text">Bereite Generierung vor...</span>
        </div>
    </div>

    <!-- STATISTIKEN-PANEL -->
    <div id="statistics-panel" class="alert alert-light d-none">
        <h6><i class="bi bi-graph-up me-2"></i>Übersicht der generierten Nachweise</h6>
        <div class="row text-center">
            <div class="col-md-3">
                <div class="bg-primary text-white rounded p-2">
                    <h4>@Model.Count</h4>
                    <small>Gesamt-Nachweise</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="bg-success text-white rounded p-2">
                    <h4>@Model.Count(w => w.Kategorie == "Praktikum")</h4>
                    <small>Praktikum</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="bg-info text-white rounded p-2">
                    <h4>@Model.Count(w => w.Kategorie == "Umschulung")</h4>
                    <small>Umschulung</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="bg-warning text-dark rounded p-2">
                    <h4>@(Model.Any() ? (Model.Max(w => w.Samstag) - Model.Min(w => w.Montag)).Days + 1 : 0)</h4>
                    <small>Tage gesamt</small>
                </div>
            </div>
        </div>
        <div class="mt-2">
            <small class="text-muted">
                Zeitraum:
                @if (Model.Any())
                {
                    @Model.Min(w => w.Montag).ToString("dd.MM.yyyy") <text> bis </text> @Model.Max(w => w.Samstag).ToString("dd.MM.yyyy")
                }
                else
                {
                    <text>Keine Daten</text>
                }
            </small>
        </div>
    </div>
</div>

<!-- ÜBERSICHTSTABELLEN -->
<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header">
                <i class="bi bi-building me-2"></i>Praktikum (@Model.Count(w => w.Kategorie == "Praktikum") Nachweise)
            </div>
            <div class="card-body">
                @if (Model.Any(w => w.Kategorie == "Praktikum"))
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Woche</th>
                                    <th>Zeitraum</th>
                                    <th>Beschreibung</th>
                                    <th>Feiertage</th>
                                    <th>Aktion</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var woche in Model.Where(w => w.Kategorie == "Praktikum").OrderBy(w => w.Nummer))
                                {
                                    <tr>
                                        <td><span class="badge bg-success">@woche.Nummer</span></td>
                                        <td>@woche.Montag.ToString("dd.MM.yyyy") - @woche.Samstag.ToString("dd.MM.yyyy")</td>
                                        <td>
                                            @if (woche.Beschreibungen.Any())
                                            {
                                                @string.Join(", ", woche.Beschreibungen.Take(2))
                                                @if (woche.Beschreibungen.Count > 2)
                                                {
                                                    <small class="text-muted">... (+@(woche.Beschreibungen.Count - 2) weitere)</small>
                                                }
                                            }
                                            else
                                            {
                                                <small class="text-muted">Keine Beschreibung</small>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var feiertagsBeschreibungen = woche.Beschreibungen.Where(b => b.StartsWith("Feiertag:")).ToList();
                                            }
                                            @if (feiertagsBeschreibungen.Any())
                                            {
                                                <small class="text-warning">
                                                    <i class="bi bi-calendar-event me-1"></i>
                                                    @feiertagsBeschreibungen.Count Feiertag(e)
                                                </small>
                                            }
                                            else
                                            {
                                                <small class="text-muted">-</small>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary download-single-btn"
                                                    data-woche-nummer="@woche.Nummer"
                                                    data-kategorie="@woche.Kategorie">
                                                <i class="bi bi-download"></i> Download
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-secondary">
                        <i class="bi bi-info-circle me-2"></i>Keine Praktikumswochen definiert.
                        <br><small>Praktikumszeiten können in den Zeiträumen auf der Startseite definiert werden.</small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col">
        <div class="card">
            <div class="card-header">
                <i class="bi bi-mortarboard me-2"></i>Umschulung (@Model.Count(w => w.Kategorie == "Umschulung") Nachweise)
            </div>
            <div class="card-body">
                @if (Model.Any(w => w.Kategorie == "Umschulung"))
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Woche</th>
                                    <th>Zeitraum</th>
                                    <th>Beschreibung</th>
                                    <th>Feiertage</th>
                                    <th>Aktion</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var woche in Model.Where(w => w.Kategorie == "Umschulung").OrderBy(w => w.Nummer))
                                {
                                    <tr>
                                        <td><span class="badge bg-primary">@woche.Nummer</span></td>
                                        <td>@woche.Montag.ToString("dd.MM.yyyy") - @woche.Samstag.ToString("dd.MM.yyyy")</td>
                                        <td>
                                            @if (woche.Beschreibungen.Any())
                                            {
                                                @string.Join(", ", woche.Beschreibungen.Take(2))
                                                @if (woche.Beschreibungen.Count > 2)
                                                {
                                                    <small class="text-muted">... (+@(woche.Beschreibungen.Count - 2) weitere)</small>
                                                }
                                            }
                                            else
                                            {
                                                <small class="text-muted">Keine Beschreibung</small>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var feiertagsBeschreibungen = woche.Beschreibungen.Where(b => b.StartsWith("Feiertag:")).ToList();
                                            }
                                            @if (feiertagsBeschreibungen.Any())
                                            {
                                                <small class="text-warning">
                                                    <i class="bi bi-calendar-event me-1"></i>
                                                    @feiertagsBeschreibungen.Count Feiertag(e)
                                                </small>
                                            }
                                            else
                                            {
                                                <small class="text-muted">-</small>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary download-single-btn"
                                                    data-woche-nummer="@woche.Nummer"
                                                    data-kategorie="@woche.Kategorie">
                                                <i class="bi bi-download"></i> Download
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-secondary">
                        <i class="bi bi-info-circle me-2"></i>Keine Umschulungswochen definiert.
                        <br><small>Dies sollte normalerweise nicht vorkommen. Prüfen Sie Ihre Zeitraum-Definitionen.</small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- NAVIGATION UND ZUSÄTZLICHE OPTIONEN -->
<div class="text-center mt-4">
    <div class="btn-group" role="group">
        <a asp-action="Index" class="btn btn-primary btn-lg">
            <i class="bi bi-arrow-left me-2"></i>Zurück zur Startseite
        </a>
        <a asp-action="TemplateHelp" class="btn btn-outline-info btn-lg">
            <i class="bi bi-question-circle me-2"></i>Template-Hilfe
        </a>
    </div>

    <div class="mt-3">
        <small class="text-muted d-block">
            <i class="bi bi-lightbulb me-1"></i>
            Verwenden Sie die Download-Buttons für die direkte Erstellung einzelner Dokumente
        </small>
        <small class="text-muted d-block">
            <i class="bi bi-folder me-1"></i>
            Das ZIP-Archiv enthält Unterordner für bessere Organisation
        </small>
    </div>
</div>

@section Scripts {
    <script>
        // 🔥 ERWEITERTE RESULT-PAGE MIT ZIP-UNTERORDNERN

        class ExtendedResultPageGenerator {
            constructor() {
                this.configData = null;
                this.wochennachweisData = null;
                this.template = null;
            }

            async initialize() {
                console.log('🚀 Erweiterte ResultPageGenerator wird initialisiert...');
                this.registerEventHandlers();
                console.log('✅ Erweiterte ResultPageGenerator bereit');
            }

            registerEventHandlers() {
                // Haupt-Download-Button
                const downloadAllBtn = document.getElementById('download-all-button');
                if (downloadAllBtn) {
                    downloadAllBtn.addEventListener('click', () => this.downloadAllDocuments());
                }

                // Test-Button
                const testBtn = document.getElementById('test-generation-button');
                if (testBtn) {
                    testBtn.addEventListener('click', () => this.testGeneration());
                }

                // Statistiken-Button
                const statsBtn = document.getElementById('show-statistics-button');
                if (statsBtn) {
                    statsBtn.addEventListener('click', () => this.toggleStatistics());
                }

                // Einzel-Download-Buttons
                const singleBtns = document.querySelectorAll('.download-single-btn');
                singleBtns.forEach(btn => {
                    btn.addEventListener('click', () => {
                        const wocheNummer = btn.getAttribute('data-woche-nummer');
                        const kategorie = btn.getAttribute('data-kategorie');
                        this.downloadSingleDocument(wocheNummer, kategorie);
                    });
                });
            }

            toggleStatistics() {
                const panel = document.getElementById('statistics-panel');
                if (panel) {
                    panel.classList.toggle('d-none');
                }
            }

            async downloadAllDocuments() {
                try {
                    this.showProgress('🔄 Bereite Download mit Unterordnern vor...');

                    if (!this.checkDependencies()) {
                        return;
                    }

                    this.showProgress('📊 Lade Wochendaten aus Session...');
                    await this.loadWochennachweisDataFromSession();

                    this.showProgress('📄 Lade Word-Template...');
                    await this.loadTemplate();

                    this.showProgress('🔨 Erstelle Word-Dokumente...');
                    const documents = await this.createAllDocuments();

                    if (documents.length === 0) {
                        throw new Error('Keine Dokumente konnten erstellt werden');
                    }

                    this.showProgress('📦 Erstelle ZIP-Archiv mit Unterordnern...');
                    await this.createZipDownloadWithFolders(documents);

                    this.showSuccess(`✅ ${documents.length} Dokumente erfolgreich erstellt und als strukturiertes ZIP heruntergeladen!`);

                } catch (error) {
                    console.error('❌ Fehler beim Download:', error);
                    this.showError(`Fehler: ${error.message}`);
                }
            }

            async downloadSingleDocument(wocheNummer, kategorie) {
                try {
                    this.showProgress(`📄 Erstelle Dokument für Woche ${wocheNummer}...`);

                    if (!this.checkDependencies()) {
                        return;
                    }

                    if (!this.wochennachweisData) {
                        this.showProgress('📊 Lade Wochendaten...');
                        await this.loadWochennachweisDataFromSession();
                    }

                    if (!this.template) {
                        this.showProgress('📄 Lade Word-Template...');
                        await this.loadTemplate();
                    }

                    // Erweiterte Wochensuche
                    const wochenArray = this.getWochenArray();

                    if (!wochenArray || wochenArray.length === 0) {
                        throw new Error('Keine Wochendaten verfügbar');
                    }

                    // Finde die entsprechende Woche
                    const woche = wochenArray.find(w => {
                        const wocheNummerMatch = (w.nummer || w.Nummer || w.NUMMER) == wocheNummer;
                        const kategorieMatch = (w.kategorie || w.Kategorie || w.KATEGORIE) === kategorie;
                        return wocheNummerMatch && kategorieMatch;
                    });

                    if (!woche) {
                        console.error('❌ Woche nicht gefunden. Verfügbare Wochen:', wochenArray);
                        throw new Error(`Woche ${wocheNummer} (${kategorie}) nicht gefunden`);
                    }

                    this.showProgress(`🔨 Erstelle Dokument für Woche ${wocheNummer}...`);
                    const document = await this.createDocument(woche);

                    // Verbesserter Dateiname mit Monat
                    const monat = this.extractMonthFromWoche(woche);
                    const filename = `Wochennachweis_${String(woche.nummer || woche.Nummer).padStart(2, '0')}_${monat}_${woche.kategorie || woche.Kategorie}.docx`;

                    this.downloadBlob(new Blob([document]), filename);

                    this.showSuccess(`✅ Dokument für Woche ${wocheNummer} erstellt!`);

                } catch (error) {
                    console.error('❌ Fehler beim Einzel-Download:', error);
                    this.showError(`Fehler: ${error.message}`);
                }
            }

            extractMonthFromWoche(woche) {
                try {
                    const templateData = woche.templateData || woche.TemplateData || {};
                    if (templateData.MONAT) return templateData.MONAT;

                    // Fallback: Aus Datum extrahieren
                    const datum = woche.montag || woche.Montag;
                    if (datum) {
                        const monatsnamen = ['', 'Januar', 'Februar', 'März', 'April', 'Mai', 'Juni',
                                           'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];
                        const datumObj = new Date(datum);
                        return monatsnamen[datumObj.getMonth() + 1] || 'Unbekannt';
                    }

                    return 'Unbekannt';
                } catch (error) {
                    return 'Unbekannt';
                }
            }

            // Verwende die erweiterte createZipDownloadWithFolders Methode
            async createZipDownloadWithFolders(documents) {
                // Diese Methode ist bereits in wochennachweis-generator.js implementiert
                // Delegiere an die globale Instanz
                if (window.wochennachweisGenerator) {
                    await window.wochennachweisGenerator.createZipDownloadWithFolders(documents, this.wochennachweisData);
                } else {
                    throw new Error('Wochennachweis-Generator nicht verfügbar');
                }
            }

            // Hilfsmethoden (delegiert an die Haupt-Klasse wo möglich)
            getWochenArray() {
                if (!this.wochennachweisData) return null;
                return this.wochennachweisData.wochen || this.wochennachweisData.Wochen || this.wochennachweisData.WOCHEN || [];
            }

            checkDependencies() {
                return window.wochennachweisGenerator ? window.wochennachweisGenerator.checkDependencies() : false;
            }

            async loadWochennachweisDataFromSession() {
                const response = await fetch('/api/wochennachweis/generate-from-session');
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Session-Daten konnten nicht geladen werden');
                }
                this.wochennachweisData = await response.json();
                console.log('📊 Erweiterte Wochendaten aus Session geladen:', this.wochennachweisData);
            }

            async loadTemplate() {
                if (this.template) return;
                const response = await fetch('/api/wochennachweis/template');
                if (!response.ok) {
                    throw new Error(`Template konnte nicht geladen werden: ${response.status}`);
                }
                this.template = await response.arrayBuffer();
                console.log('📄 Template geladen:', this.template.byteLength, 'Bytes');
            }

            async createAllDocuments() {
                const documents = [];
                const wochenArray = this.getWochenArray();

                if (!wochenArray || wochenArray.length === 0) {
                    throw new Error('Keine Wochendaten verfügbar');
                }

                for (let i = 0; i < wochenArray.length; i++) {
                    const woche = wochenArray[i];
                    const wocheNummer = woche.nummer || woche.Nummer || 'unbekannt';

                    this.showProgress(`📝 Erstelle Dokument ${i + 1}/${wochenArray.length} (Woche ${wocheNummer})...`);

                    try {
                        const document = await this.createDocument(woche);
                        const monat = this.extractMonthFromWoche(woche);
                        const kategorie = woche.kategorie || woche.Kategorie;

                        documents.push({
                            name: `Wochennachweis_${String(wocheNummer).padStart(2, '0')}_${monat}_${kategorie}.docx`,
                            content: document,
                            woche: woche,
                            kategorie: kategorie
                        });

                        console.log(`✅ Dokument ${i + 1} erstellt: Woche ${wocheNummer}`);
                    } catch (docError) {
                        console.error(`❌ Fehler bei Dokument ${i + 1}:`, docError);
                    }
                }

                return documents;
            }

            async createDocument(wochenData) {
                // Delegiere an die Haupt-Generator-Klasse
                if (window.wochennachweisGenerator) {
                    return await window.wochennachweisGenerator.createDocument(wochenData);
                } else {
                    throw new Error('Hauptgenerator nicht verfügbar');
                }
            }

            downloadBlob(blob, filename) {
                if (window.wochennachweisGenerator) {
                    window.wochennachweisGenerator.downloadBlob(blob, filename);
                } else {
                    // Fallback
                    const link = document.createElement('a');
                    const url = URL.createObjectURL(blob);
                    link.href = url;
                    link.download = filename;
                    link.style.display = 'none';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    setTimeout(() => URL.revokeObjectURL(url), 1000);
                }
            }

            async testGeneration() {
                try {
                    this.showProgress('🔧 Teste erweiterte Funktionen...');

                    console.log('🔧 === ERWEITERTE SYSTEM-DIAGNOSE ===');

                    // 1. Basis-Test delegieren
                    if (window.wochennachweisGenerator) {
                        await window.wochennachweisGenerator.testDocxtemplater();
                    }

                    // 2. Zusätzliche Tests für Result-Page
                    console.log('📋 Result-Page spezifische Tests:');

                    // Session-Daten Test
                    try {
                        const sessionResponse = await fetch('/api/wochennachweis/generate-from-session');
                        if (sessionResponse.ok) {
                            const sessionData = await sessionResponse.json();
                            console.log('  Session-Daten: ✅', sessionData.Wochen?.length || 0, 'Wochen');
                        } else {
                            console.log('  Session-Daten: ❌', sessionResponse.status);
                        }
                    } catch (sessionError) {
                        console.log('  Session-Daten: ❌', sessionError.message);
                    }

                    // Feiertags-Test
                    try {
                        const currentYear = new Date().getFullYear();
                        const feiertagResponse = await fetch(`/api/wochennachweis/feiertage/${currentYear}?bundesland=DE-NW`);
                        if (feiertagResponse.ok) {
                            const feiertagData = await feiertagResponse.json();
                            console.log('  Feiertage: ✅', feiertagData.anzahl, 'Feiertage für', currentYear);
                        } else {
                            console.log('  Feiertage: ❌', feiertagResponse.status);
                        }
                    } catch (feiertagError) {
                        console.log('  Feiertage: ❌', feiertagError.message);
                    }

                    // ZIP-Ordnerstruktur Test
                    console.log('📁 ZIP-Ordnerstruktur Test:');
                    if (typeof JSZip !== 'undefined') {
                        const testZip = new JSZip();
                        testZip.folder('Praktikum');
                        testZip.folder('Umschulung');
                        testZip.file('README.txt', 'Test');

                        const testBlob = await testZip.generateAsync({ type: 'blob' });
                        console.log('  ZIP-Ordner: ✅ Struktur erfolgreich getestet (', testBlob.size, 'Bytes)');
                    } else {
                        console.log('  ZIP-Ordner: ❌ JSZip nicht verfügbar');
                    }

                    this.showSuccess(`
                        ✅ <strong>Erweiterte Funktionen getestet!</strong><br>
                        <small>ZIP-Unterordner, Session-Integration und Feiertage funktionieren.</small><br>
                        <small>Siehe Browser-Konsole für Details.</small>
                    `);

                } catch (error) {
                    console.error('❌ Erweiterter Test-Fehler:', error);
                    this.showError(`Erweiterter Test fehlgeschlagen: ${error.message}`);
                }
            }

            // UI-Hilfsmethoden
            showProgress(message) {
                const progressDiv = document.getElementById('generation-progress');
                const progressText = document.getElementById('progress-text');

                if (progressDiv && progressText) {
                    progressText.textContent = message;
                    progressDiv.style.display = 'block';
                    progressDiv.className = 'alert alert-info';
                }

                console.log('🔄', message);
            }

            showSuccess(message) {
                const progressDiv = document.getElementById('generation-progress');
                if (progressDiv) {
                    progressDiv.className = 'alert alert-success';
                    progressDiv.innerHTML = `
                        <div class="d-flex align-items-center justify-content-center">
                            <i class="bi bi-check-circle me-2"></i>
                            <div>${message}</div>
                        </div>
                    `;
                    progressDiv.style.display = 'block';

                    setTimeout(() => {
                        progressDiv.style.display = 'none';
                    }, 15000);
                }

                console.log('✅', message);
            }

            showError(message) {
                const progressDiv = document.getElementById('generation-progress');
                if (progressDiv) {
                    progressDiv.className = 'alert alert-danger';
                    progressDiv.innerHTML = `
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <div>${message}</div>
                            </div>
                            <button type="button" class="btn-close" onclick="document.getElementById('generation-progress').style.display='none'"></button>
                        </div>
                    `;
                    progressDiv.style.display = 'block';
                }

                console.error('❌', message);
            }
        }

        // === INITIALISIERUNG ===
        const extendedResultGenerator = new ExtendedResultPageGenerator();

        document.addEventListener('DOMContentLoaded', function() {
            console.log('📋 Erweiterte Result-Seite geladen - initialisiere Generator...');
            extendedResultGenerator.initialize();

            // Automatische Statistiken nach 2 Sekunden anzeigen
            setTimeout(() => {
                const statsPanel = document.getElementById('statistics-panel');
                if (statsPanel) {
                    statsPanel.classList.remove('d-none');
                }
            }, 2000);
        });

        // === GLOBALE DEBUG-FUNKTIONEN ===
        window.debugExtendedResultPage = function() {
            console.log('🔧 === ERWEITERTE RESULT-PAGE DEBUG ===');
            console.log('Generator:', extendedResultGenerator);
            console.log('Wochendaten geladen:', !!extendedResultGenerator.wochennachweisData);
            console.log('Template geladen:', !!extendedResultGenerator.template);
            console.log('Haupt-Generator verfügbar:', !!window.wochennachweisGenerator);

            console.log('UI-Elemente:', {
                downloadAllButton: !!document.getElementById('download-all-button'),
                testButton: !!document.getElementById('test-generation-button'),
                statisticsButton: !!document.getElementById('show-statistics-button'),
                singleDownloads: document.querySelectorAll('.download-single-btn').length,
                statisticsPanel: !!document.getElementById('statistics-panel')
            });

            // Session-API Test
            fetch('/api/wochennachweis/current-config')
                .then(response => response.json())
                .then(data => console.log('Aktuelle Session-Config:', data))
                .catch(error => console.log('Session-Config Fehler:', error));
        };

        window.forceExtendedDownload = function() {
            console.log('🔧 Force Extended Download...');
            extendedResultGenerator.downloadAllDocuments();
        };

        window.testZipStructure = async function() {
            console.log('🔧 Test ZIP-Struktur...');

            if (typeof JSZip === 'undefined') {
                console.error('❌ JSZip nicht verfügbar');
                return;
            }

            const testZip = new JSZip();

            // Ordnerstruktur erstellen
            const praktikumFolder = testZip.folder('Praktikum');
            const umschulungFolder = testZip.folder('Umschulung');

            // Test-Dateien hinzufügen
            praktikumFolder.file('Test_Praktikum.txt', 'Dies ist ein Test für den Praktikum-Ordner');
            umschulungFolder.file('Test_Umschulung.txt', 'Dies ist ein Test für den Umschulung-Ordner');
            testZip.file('README.txt', 'Test ZIP mit Unterordner-Struktur\nErstellt: ' + new Date().toLocaleString());

            try {
                const zipBlob = await testZip.generateAsync({ type: 'blob' });

                // Download des Test-ZIPs
                const link = document.createElement('a');
                const url = URL.createObjectURL(zipBlob);
                link.href = url;
                link.download = 'Test_ZIP_Struktur.zip';
                link.style.display = 'none';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                setTimeout(() => URL.revokeObjectURL(url), 1000);

                console.log('✅ Test-ZIP mit Ordnerstruktur erfolgreich erstellt und heruntergeladen');

                if (window.showNotification) {
                    window.showNotification('Test-ZIP mit Ordnerstruktur heruntergeladen', 'success');
                }
            } catch (error) {
                console.error('❌ Fehler beim Erstellen der Test-ZIP:', error);
            }
        };

        console.log('📋 Erweiterte Result-Page JavaScript geladen');
        console.log('🔧 Debug-Funktionen: debugExtendedResultPage(), forceExtendedDownload(), testZipStructure()');
    </script>
}