@model List<Wochennachweis>
@{
    ViewData["Title"] = "Wochennachweis-Übersicht";
}

<div class="text-center mb-4">
    <h1 class="display-4">📋 Wochennachweis-Übersicht</h1>
    <p>Für @ViewBag.Nachname wurden @Model.Count Wochennachweise berechnet.</p>

    <!-- 🔥 ERWEITERTE DOWNLOAD-SEKTION -->
    <div class="alert alert-success">
        <h5><i class="bi bi-download me-2"></i>Dokumente erstellen und herunterladen</h5>
        <p class="mb-3">Klicken Sie auf den Button unten, um alle Wochennachweise als Word-Dokumente zu generieren.</p>

        <!-- HAUPT-DOWNLOAD-BUTTON -->
        <button type="button" class="btn btn-success btn-lg me-3" id="download-all-button">
            <i class="bi bi-file-earmark-word me-2"></i>
            Alle Dokumente als ZIP herunterladen
            <br><small class="fw-normal">Mit Unterordnern: Praktikum/ und Umschulung/</small>
        </button>

        <!-- ZUSÄTZLICHE OPTIONEN -->
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-outline-secondary" id="test-generation-button">
                <i class="bi bi-gear me-1"></i>
                System testen
            </button>
            <button type="button" class="btn btn-outline-info" id="show-statistics-button">
                <i class="bi bi-graph-up me-1"></i>
                Statistiken
            </button>
        </div>
    </div>

    <!-- FORTSCHRITTSANZEIGE -->
    <div id="generation-progress" style="display: none;" class="alert alert-info">
        <div class="d-flex align-items-center justify-content-center">
            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
            <span id="progress-text">Bereite Generierung vor...</span>
        </div>
    </div>

    <!-- STATISTIKEN-PANEL -->
    <div id="statistics-panel" class="alert alert-light d-none">
        <h6><i class="bi bi-graph-up me-2"></i>Übersicht der generierten Nachweise</h6>
        <div class="row text-center">
            <div class="col-md-3">
                <div class="bg-primary text-white rounded p-2">
                    <h4>@Model.Count</h4>
                    <small>Gesamt-Nachweise</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="bg-success text-white rounded p-2">
                    <h4>@Model.Count(w => w.Kategorie == "Praktikum")</h4>
                    <small>Praktikum</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="bg-info text-white rounded p-2">
                    <h4>@Model.Count(w => w.Kategorie == "Umschulung")</h4>
                    <small>Umschulung</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="bg-warning text-dark rounded p-2">
                    <h4>@(Model.Any() ? (Model.Max(w => w.Samstag) - Model.Min(w => w.Montag)).Days + 1 : 0)</h4>
                    <small>Tage gesamt</small>
                </div>
            </div>
        </div>
        <div class="mt-2">
            <small class="text-muted">
                Zeitraum:
                @if (Model.Any())
                {
                    @Model.Min(w => w.Montag).ToString("dd.MM.yyyy") <text> bis </text> @Model.Max(w => w.Samstag).ToString("dd.MM.yyyy")
                }
                else
                {
                    <text>Keine Daten</text>
                }
            </small>
        </div>
    </div>
</div>

<!-- ÜBERSICHTSTABELLEN -->
<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-header">
                <i class="bi bi-building me-2"></i>Praktikum (@Model.Count(w => w.Kategorie == "Praktikum") Nachweise)
            </div>
            <div class="card-body">
                @if (Model.Any(w => w.Kategorie == "Praktikum"))
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Woche</th>
                                    <th>Zeitraum</th>
                                    <th>Beschreibung</th>
                                    <th>Feiertage</th>
                                    <th>Aktion</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var woche in Model.Where(w => w.Kategorie == "Praktikum").OrderBy(w => w.Nummer))
                                {
                                    <tr>
                                        <td><span class="badge bg-success">@woche.Nummer</span></td>
                                        <td>@woche.Montag.ToString("dd.MM.yyyy") - @woche.Samstag.ToString("dd.MM.yyyy")</td>
                                        <td>
                                            @if (woche.Beschreibungen.Any())
                                            {
                                                @string.Join(", ", woche.Beschreibungen.Take(2))
                                                @if (woche.Beschreibungen.Count > 2)
                                                {
                                                    <small class="text-muted">... (+@(woche.Beschreibungen.Count - 2) weitere)</small>
                                                }
                                            }
                                            else
                                            {
                                                <small class="text-muted">Keine Beschreibung</small>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var feiertagsBeschreibungen = woche.Beschreibungen.Where(b => b.StartsWith("Feiertag:")).ToList();
                                            }
                                            @if (feiertagsBeschreibungen.Any())
                                            {
                                                <small class="text-warning">
                                                    <i class="bi bi-calendar-event me-1"></i>
                                                    @feiertagsBeschreibungen.Count Feiertag(e)
                                                </small>
                                            }
                                            else
                                            {
                                                <small class="text-muted">-</small>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary download-single-btn"
                                                    data-woche-nummer="@woche.Nummer"
                                                    data-kategorie="@woche.Kategorie">
                                                <i class="bi bi-download"></i> Download
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-secondary">
                        <i class="bi bi-info-circle me-2"></i>Keine Praktikumswochen definiert.
                        <br><small>Praktikumszeiten können in den Zeiträumen auf der Startseite definiert werden.</small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col">
        <div class="card">
            <div class="card-header">
                <i class="bi bi-mortarboard me-2"></i>Umschulung (@Model.Count(w => w.Kategorie == "Umschulung") Nachweise)
            </div>
            <div class="card-body">
                @if (Model.Any(w => w.Kategorie == "Umschulung"))
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Woche</th>
                                    <th>Zeitraum</th>
                                    <th>Beschreibung</th>
                                    <th>Feiertage</th>
                                    <th>Aktion</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var woche in Model.Where(w => w.Kategorie == "Umschulung").OrderBy(w => w.Nummer))
                                {
                                    <tr>
                                        <td><span class="badge bg-primary">@woche.Nummer</span></td>
                                        <td>@woche.Montag.ToString("dd.MM.yyyy") - @woche.Samstag.ToString("dd.MM.yyyy")</td>
                                        <td>
                                            @if (woche.Beschreibungen.Any())
                                            {
                                                @string.Join(", ", woche.Beschreibungen.Take(2))
                                                @if (woche.Beschreibungen.Count > 2)
                                                {
                                                    <small class="text-muted">... (+@(woche.Beschreibungen.Count - 2) weitere)</small>
                                                }
                                            }
                                            else
                                            {
                                                <small class="text-muted">Keine Beschreibung</small>
                                            }
                                        </td>
                                        <td>
                                            @{
                                                var feiertagsBeschreibungen = woche.Beschreibungen.Where(b => b.StartsWith("Feiertag:")).ToList();
                                            }
                                            @if (feiertagsBeschreibungen.Any())
                                            {
                                                <small class="text-warning">
                                                    <i class="bi bi-calendar-event me-1"></i>
                                                    @feiertagsBeschreibungen.Count Feiertag(e)
                                                </small>
                                            }
                                            else
                                            {
                                                <small class="text-muted">-</small>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-primary download-single-btn"
                                                    data-woche-nummer="@woche.Nummer"
                                                    data-kategorie="@woche.Kategorie">
                                                <i class="bi bi-download"></i> Download
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-secondary">
                        <i class="bi bi-info-circle me-2"></i>Keine Umschulungswochen definiert.
                        <br><small>Dies sollte normalerweise nicht vorkommen. Prüfen Sie Ihre Zeitraum-Definitionen.</small>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- NAVIGATION UND ZUSÄTZLICHE OPTIONEN -->
<div class="text-center mt-4">
    <div class="btn-group" role="group">
        <a asp-action="Index" class="btn btn-primary btn-lg">
            <i class="bi bi-arrow-left me-2"></i>Zurück zur Startseite
        </a>
        <a asp-action="TemplateHelp" class="btn btn-outline-info btn-lg">
            <i class="bi bi-question-circle me-2"></i>Template-Hilfe
        </a>
    </div>

    <div class="mt-3">
        <small class="text-muted d-block">
            <i class="bi bi-lightbulb me-1"></i>
            Verwenden Sie die Download-Buttons für die direkte Erstellung einzelner Dokumente
        </small>
        <small class="text-muted d-block">
            <i class="bi bi-folder me-1"></i>
            Das ZIP-Archiv enthält Unterordner für bessere Organisation
        </small>
    </div>
</div>

@section Scripts {
    <script>
                // 🔥 REPARIERTE RESULT-PAGE MIT FUNKTIONIERENDEM DOWNLOAD

                class FixedResultPageGenerator {
                    constructor() {
                        this.configData = null;
                        this.wochennachweisData = null;
                        this.template = null;
                    }

                    async initialize() {
                        console.log('🚀 Reparierte ResultPageGenerator wird initialisiert...');
                        this.registerEventHandlers();
                        console.log('✅ Reparierte ResultPageGenerator bereit');
                    }

                    registerEventHandlers() {
                        // Haupt-Download-Button - REPARIERT
                        const downloadAllBtn = document.getElementById('download-all-button');
                        if (downloadAllBtn) {
                            downloadAllBtn.addEventListener('click', () => this.downloadAllDocumentsFixed());
                        }

                        // Test-Button
                        const testBtn = document.getElementById('test-generation-button');
                        if (testBtn) {
                            testBtn.addEventListener('click', () => this.testGeneration());
                        }

                        // Statistiken-Button
                        const statsBtn = document.getElementById('show-statistics-button');
                        if (statsBtn) {
                            statsBtn.addEventListener('click', () => this.toggleStatistics());
                        }

                        // Einzel-Download-Buttons - REPARIERT
                        const singleBtns = document.querySelectorAll('.download-single-btn');
                        singleBtns.forEach(btn => {
                            btn.addEventListener('click', () => {
                                const wocheNummer = btn.getAttribute('data-woche-nummer');
                                const kategorie = btn.getAttribute('data-kategorie');
                                this.downloadSingleDocumentFixed(wocheNummer, kategorie);
                            });
                        });
                    }

                    toggleStatistics() {
                        const panel = document.getElementById('statistics-panel');
                        if (panel) {
                            panel.classList.toggle('d-none');
                        }
                    }

                    // 🔧 REPARIERTE HAUPT-DOWNLOAD-METHODE
                    async downloadAllDocumentsFixed() {
                        try {
                            this.showProgress('🔄 Bereite Download mit Unterordnern vor...');

                            if (!this.checkDependencies()) {
                                return;
                            }

                            // Session-Daten laden
                            this.showProgress('📊 Lade Wochendaten aus Session...');
                            const response = await fetch('/api/wochennachweis/generate-from-session');
                            if (!response.ok) {
                                throw new Error('Session-Daten nicht verfügbar');
                            }

                            const sessionData = await response.json();
                            console.log('✅ Session-Daten geladen:', sessionData);

                            // Template laden
                            this.showProgress('📄 Lade Word-Template...');
                            const templateResponse = await fetch('/api/wochennachweis/template');
                            if (!templateResponse.ok) {
                                throw new Error('Template konnte nicht geladen werden');
                            }
                            const templateArrayBuffer = await templateResponse.arrayBuffer();
                            console.log('✅ Template geladen:', templateArrayBuffer.byteLength, 'Bytes');

                            // Dokumente erstellen
                            this.showProgress('🔨 Erstelle Word-Dokumente...');
                            const wochen = sessionData.Wochen || sessionData.wochen || [];
                            console.log('📋 Wochen gefunden:', wochen.length);

                            if (wochen.length === 0) {
                                throw new Error('Keine Wochendaten verfügbar');
                            }

                            const documents = [];

                            for (let i = 0; i < wochen.length; i++) {
                                const woche = wochen[i];
                                const wocheNummer = woche.nummer || woche.Nummer || (i + 1);
                                this.showProgress(`📝 Erstelle Dokument ${i + 1}/${wochen.length} (Woche ${wocheNummer})...`);

                                try {
                                    const document = await this.createDocumentFixed(woche, templateArrayBuffer);

                                    // Dateiname erstellen
                                    const kategorie = woche.kategorie || woche.Kategorie || 'Sonstige';
                                    const templateData = woche.templateData || woche.TemplateData || {};
                                    const monat = templateData.MONAT || 'Unbekannt';
                                    const filename = `Wochennachweis_${String(wocheNummer).padStart(2, '0')}_${monat}_${kategorie}.docx`;

                                    documents.push({
                                        name: filename,
                                        content: document,
                                        woche: woche,
                                        kategorie: kategorie
                                    });

                                    console.log(`✅ Dokument ${i + 1} erstellt: ${filename}`);
                                } catch (docError) {
                                    console.error(`❌ Fehler bei Dokument ${i + 1}:`, docError);
                                }
                            }

                            if (documents.length === 0) {
                                throw new Error('Keine Dokumente konnten erstellt werden');
                            }

                            // ZIP erstellen und downloaden
                            this.showProgress('📦 Erstelle ZIP-Archiv mit Unterordnern...');
                            await this.createZipDownloadWithFoldersFixed(documents, sessionData);

                            this.showSuccess(`✅ ${documents.length} Dokumente erfolgreich erstellt und als ZIP heruntergeladen!`);

                        } catch (error) {
                            console.error('❌ Fehler beim Download:', error);
                            this.showError(`Fehler: ${error.message}`);
                        }
                    }

                    // 🔧 REPARIERTE EINZEL-DOWNLOAD-METHODE
                    async downloadSingleDocumentFixed(wocheNummer, kategorie) {
                        try {
                            this.showProgress(`📄 Erstelle Dokument für Woche ${wocheNummer}...`);

                            if (!this.checkDependencies()) {
                                return;
                            }

                            // Session-Daten laden
                            const response = await fetch('/api/wochennachweis/generate-from-session');
                            if (!response.ok) {
                                throw new Error('Session-Daten nicht verfügbar');
                            }
                            const sessionData = await response.json();

                            // Template laden
                            const templateResponse = await fetch('/api/wochennachweis/template');
                            const templateArrayBuffer = await templateResponse.arrayBuffer();

                            // Woche finden
                            const wochen = sessionData.Wochen || sessionData.wochen || [];
                            const woche = wochen.find(w => {
                                const wNummerMatch = (w.nummer || w.Nummer) == wocheNummer;
                                const kategorieMatch = (w.kategorie || w.Kategorie) === kategorie;
                                return wNummerMatch && kategorieMatch;
                            });

                            if (!woche) {
                                throw new Error(`Woche ${wocheNummer} (${kategorie}) nicht gefunden`);
                            }

                            // Dokument erstellen
                            const document = await this.createDocumentFixed(woche, templateArrayBuffer);

                            // Download
                            const templateData = woche.templateData || woche.TemplateData || {};
                            const monat = templateData.MONAT || 'Unbekannt';
                            const filename = `Wochennachweis_${String(wocheNummer).padStart(2, '0')}_${monat}_${kategorie}.docx`;

                            this.downloadBlob(new Blob([document]), filename);

                            this.showSuccess(`✅ Dokument für Woche ${wocheNummer} erstellt!`);

                        } catch (error) {
                            console.error('❌ Fehler beim Einzel-Download:', error);
                            this.showError(`Fehler: ${error.message}`);
                        }
                    }

                    // 🔧 REPARIERTE DOKUMENT-ERSTELLUNG
                    async createDocumentFixed(wochenData, templateArrayBuffer) {
                        try {
                            // PizZip und Docxtemplater verwenden
                            const zip = new PizZip(templateArrayBuffer);
                            const doc = new docxtemplater();
                            doc.loadZip(zip);
                            doc.setOptions({
                                paragraphLoop: true,
                                linebreaks: true,
                                delimiters: { start: '{{', end: '}}' }
                            });

                            // Template-Daten setzen
                            const templateData = wochenData.templateData || wochenData.TemplateData || {};
                            doc.setData(templateData);
                            doc.render();

                            // Output generieren
                            const output = doc.getZip().generate({
                                type: 'arraybuffer',
                                mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                                compression: 'DEFLATE'
                            });

                            return output;
                        } catch (error) {
                            console.error('❌ Dokument-Erstellung Fehler:', error);
                            throw new Error(`Dokumenterstellung fehlgeschlagen: ${error.message}`);
                        }
                    }

                    // 🔧 REPARIERTE ZIP-ERSTELLUNG
                    async createZipDownloadWithFoldersFixed(documents, metaData) {
                        try {
                            const zip = new JSZip();

                            // Dokumente nach Kategorien sortieren
                            const kategorien = { 'Praktikum': [], 'Umschulung': [], 'Sonstige': [] };
                            documents.forEach(doc => {
                                const kategorie = doc.kategorie || 'Sonstige';
                                if (kategorien[kategorie]) {
                                    kategorien[kategorie].push(doc);
                                } else {
                                    kategorien['Sonstige'].push(doc);
                                }
                            });

                            // Ordner erstellen und Dateien hinzufügen
                            Object.keys(kategorien).forEach(kategorie => {
                                const docs = kategorien[kategorie];
                                if (docs.length > 0) {
                                    console.log(`📁 Erstelle Ordner '${kategorie}' mit ${docs.length} Dokumenten`);
                                    zip.folder(kategorie);
                                    docs.forEach(doc => {
                                        zip.file(`${kategorie}/${doc.name}`, doc.content);
                                    });
                                }
                            });

                            // README hinzufügen
                            const nachname = metaData.nachname || metaData.Nachname || 'Unbekannt';
                            const vorname = metaData.vorname || metaData.Vorname || 'Unbekannt';
                            const klasse = metaData.klasse || metaData.Klasse || 'Unbekannt';

                            const readme = `Wochennachweise - ${nachname}, ${vorname}
        ${'='.repeat(50)}

        Erstellt am: ${new Date().toLocaleString('de-DE')}
        Anzahl Dokumente: ${documents.length}
        Name: ${nachname}, ${vorname}
        Klasse: ${klasse}

        Ordnerstruktur:
        ${Object.keys(kategorien).map(kat => {
                                const count = kategorien[kat].length;
                                return count > 0 ? `📁 ${kat}/ (${count} Dokumente)` : null;
                            }).filter(Boolean).join('\n')}

        Generiert mit: ASP.NET Core Wochennachweis-Generator`;

                            zip.file('README.txt', readme);

                            // ZIP generieren
                            console.log('📦 Generiere ZIP-Archiv mit Ordnerstruktur...');
                            const zipContent = await zip.generateAsync({
                                type: 'blob',
                                compression: 'DEFLATE',
                                compressionOptions: { level: 6 }
                            });

                            // Download starten
                            const filename = `Wochennachweise_${nachname}_${new Date().toISOString().split('T')[0]}.zip`;
                            this.downloadBlob(zipContent, filename);

                            console.log('✅ ZIP-Download gestartet:', filename);

                        } catch (error) {
                            console.error('❌ ZIP-Fehler:', error);
                            throw new Error(`ZIP-Erstellung fehlgeschlagen: ${error.message}`);
                        }
                    }

                    // Hilfsmethoden
                    checkDependencies() {
                        const hasPizZip = typeof PizZip !== 'undefined';
                        const hasDocxtemplater = typeof docxtemplater !== 'undefined';
                        const hasJSZip = typeof JSZip !== 'undefined';

                        if (!hasPizZip || !hasDocxtemplater || !hasJSZip) {
                            this.showError('Benötigte Libraries fehlen. Seite neu laden oder npm run copy-libs ausführen.');
                            return false;
                        }
                        return true;
                    }

                    downloadBlob(blob, filename) {
                        try {
                            const link = document.createElement('a');
                            const url = URL.createObjectURL(blob);
                            link.href = url;
                            link.download = filename;
                            link.style.display = 'none';

                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);

                            setTimeout(() => URL.revokeObjectURL(url), 1000);
                            console.log('💾 Download gestartet:', filename);
                        } catch (error) {
                            console.error('❌ Download-Fehler:', error);
                            throw new Error(`Download fehlgeschlagen: ${error.message}`);
                        }
                    }

                    async testGeneration() {
                        try {
                            this.showProgress('🔧 Teste erweiterte Funktionen...');
                            console.log('🔧 === REPARIERTE SYSTEM-DIAGNOSE ===');

                            // Basis-Tests
                            const libTest = this.checkDependencies();
                            console.log('📚 Bibliotheken:', libTest ? '✅ OK' : '❌ Fehler');

                            // Session-Test
                            try {
                                const sessionResponse = await fetch('/api/wochennachweis/generate-from-session');
                                if (sessionResponse.ok) {
                                    const sessionData = await sessionResponse.json();
                                    console.log('📊 Session-Daten: ✅', sessionData.Wochen?.length || 0, 'Wochen');
                                } else {
                                    console.log('📊 Session-Daten: ❌', sessionResponse.status);
                                }
                            } catch (sessionError) {
                                console.log('📊 Session-Daten: ❌', sessionError.message);
                            }

                            // Template-Test
                            try {
                                const templateResponse = await fetch('/api/wochennachweis/template');
                                if (templateResponse.ok) {
                                    const templateBlob = await templateResponse.blob();
                                    console.log('📄 Template: ✅', templateBlob.size, 'Bytes');
                                } else {
                                    console.log('📄 Template: ❌', templateResponse.status);
                                }
                            } catch (templateError) {
                                console.log('📄 Template: ❌', templateError.message);
                            }

                            this.showSuccess('✅ Reparierte Funktionen getestet! Siehe Browser-Konsole für Details.');

                        } catch (error) {
                            console.error('❌ Test-Fehler:', error);
                            this.showError(`Test fehlgeschlagen: ${error.message}`);
                        }
                    }

                    // UI-Hilfsmethoden
                    showProgress(message) {
                        const progressDiv = document.getElementById('generation-progress');
                        const progressText = document.getElementById('progress-text');

                        if (progressDiv && progressText) {
                            progressText.textContent = message;
                            progressDiv.style.display = 'block';
                            progressDiv.className = 'alert alert-info';
                        }
                        console.log('🔄', message);
                    }

                    showSuccess(message) {
                        const progressDiv = document.getElementById('generation-progress');
                        if (progressDiv) {
                            progressDiv.className = 'alert alert-success';
                            progressDiv.innerHTML = `
                                <div class="d-flex align-items-center justify-content-center">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <div>${message}</div>
                                </div>
                            `;
                            progressDiv.style.display = 'block';
                            setTimeout(() => progressDiv.style.display = 'none', 15000);
                        }
                        console.log('✅', message);
                    }

                    showError(message) {
                        const progressDiv = document.getElementById('generation-progress');
                        if (progressDiv) {
                            progressDiv.className = 'alert alert-danger';
                            progressDiv.innerHTML = `
                                <div class="d-flex align-items-center justify-content-between">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-exclamation-triangle me-2"></i>
                                        <div>${message}</div>
                                    </div>
                                    <button type="button" class="btn-close" onclick="document.getElementById('generation-progress').style.display='none'"></button>
                                </div>
                            `;
                            progressDiv.style.display = 'block';
                        }
                        console.error('❌', message);
                    }
                }

                // === INITIALISIERUNG ===
                const fixedResultGenerator = new FixedResultPageGenerator();

                document.addEventListener('DOMContentLoaded', function() {
                    console.log('📋 REPARIERTE Result-Seite geladen - initialisiere Generator...');
                    fixedResultGenerator.initialize();

                    // Automatische Statistiken nach 2 Sekunden anzeigen
                    setTimeout(() => {
                        const statsPanel = document.getElementById('statistics-panel');
                        if (statsPanel) {
                            statsPanel.classList.remove('d-none');
                        }
                    }, 2000);
                });

                console.log('📋 REPARIERTE Result-Page JavaScript geladen - Downloads sollten jetzt funktionieren!');
    </script>
}
}